/**
 * Copyright (c) 2000-present Liferay, Inc. All rights reserved.
 *
 * This library is free software; you can redistribute it and/or modify it under
 * the terms of the GNU Lesser General Public License as published by the Free
 * Software Foundation; either version 2.1 of the License, or (at your option)
 * any later version.
 *
 * This library is distributed in the hope that it will be useful, but WITHOUT
 * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or FITNESS
 * FOR A PARTICULAR PURPOSE. See the GNU Lesser General Public License for more
 * details.
 */

package com.medicus.common.service.model.impl;

import aQute.bnd.annotation.ProviderType;

import com.liferay.expando.kernel.model.ExpandoBridge;
import com.liferay.expando.kernel.util.ExpandoBridgeFactoryUtil;

import com.liferay.portal.kernel.bean.AutoEscapeBeanHandler;
import com.liferay.portal.kernel.model.CacheModel;
import com.liferay.portal.kernel.model.impl.BaseModelImpl;
import com.liferay.portal.kernel.service.ServiceContext;
import com.liferay.portal.kernel.util.GetterUtil;
import com.liferay.portal.kernel.util.ProxyUtil;
import com.liferay.portal.kernel.util.StringBundler;
import com.liferay.portal.kernel.util.StringPool;

import com.medicus.common.service.model.Student;
import com.medicus.common.service.model.StudentModel;

import java.io.Serializable;

import java.sql.Types;

import java.util.Date;
import java.util.HashMap;
import java.util.Map;

/**
 * The base model implementation for the Student service. Represents a row in the &quot;Medicus_Student&quot; database table, with each column mapped to a property of this class.
 *
 * <p>
 * This implementation and its corresponding interface {@link StudentModel} exist only as a container for the default property accessors generated by ServiceBuilder. Helper methods and all application logic should be put in {@link StudentImpl}.
 * </p>
 *
 * @author Brian Wing Shun Chan
 * @see StudentImpl
 * @see Student
 * @see StudentModel
 * @generated
 */
@ProviderType
public class StudentModelImpl extends BaseModelImpl<Student>
	implements StudentModel {
	/*
	 * NOTE FOR DEVELOPERS:
	 *
	 * Never modify or reference this class directly. All methods that expect a student model instance should use the {@link Student} interface instead.
	 */
	public static final String TABLE_NAME = "Medicus_Student";
	public static final Object[][] TABLE_COLUMNS = {
			{ "studentId", Types.BIGINT },
			{ "stundetCampusId", Types.VARCHAR },
			{ "campusId", Types.BIGINT },
			{ "schoolId", Types.BIGINT },
			{ "firstName", Types.VARCHAR },
			{ "middleName", Types.VARCHAR },
			{ "lastName", Types.VARCHAR },
			{ "profileImageId", Types.BIGINT },
			{ "dateOfBirth", Types.TIMESTAMP },
			{ "gender", Types.VARCHAR },
			{ "contactNumber", Types.VARCHAR },
			{ "homePhoneNumber", Types.VARCHAR },
			{ "emailAddress", Types.VARCHAR },
			{ "primaryLanguage", Types.VARCHAR },
			{ "secondaryLanguage", Types.VARCHAR },
			{ "address", Types.VARCHAR },
			{ "city", Types.VARCHAR },
			{ "zipcode", Types.VARCHAR },
			{ "state_", Types.VARCHAR },
			{ "pace", Types.VARCHAR },
			{ "gpa", Types.FLOAT },
			{ "resumeFileEntryId", Types.BIGINT },
			{ "profession", Types.VARCHAR },
			{ "practices", Types.VARCHAR },
			{ "hired", Types.BOOLEAN },
			{ "graduationDate", Types.TIMESTAMP },
			{ "activelySeekingEmployment", Types.BOOLEAN },
			{ "haveExternship", Types.BOOLEAN },
			{ "createDate", Types.TIMESTAMP },
			{ "createdBy", Types.BIGINT },
			{ "modifiedDate", Types.TIMESTAMP },
			{ "modifiedBy", Types.BIGINT }
		};
	public static final Map<String, Integer> TABLE_COLUMNS_MAP = new HashMap<String, Integer>();

	static {
		TABLE_COLUMNS_MAP.put("studentId", Types.BIGINT);
		TABLE_COLUMNS_MAP.put("stundetCampusId", Types.VARCHAR);
		TABLE_COLUMNS_MAP.put("campusId", Types.BIGINT);
		TABLE_COLUMNS_MAP.put("schoolId", Types.BIGINT);
		TABLE_COLUMNS_MAP.put("firstName", Types.VARCHAR);
		TABLE_COLUMNS_MAP.put("middleName", Types.VARCHAR);
		TABLE_COLUMNS_MAP.put("lastName", Types.VARCHAR);
		TABLE_COLUMNS_MAP.put("profileImageId", Types.BIGINT);
		TABLE_COLUMNS_MAP.put("dateOfBirth", Types.TIMESTAMP);
		TABLE_COLUMNS_MAP.put("gender", Types.VARCHAR);
		TABLE_COLUMNS_MAP.put("contactNumber", Types.VARCHAR);
		TABLE_COLUMNS_MAP.put("homePhoneNumber", Types.VARCHAR);
		TABLE_COLUMNS_MAP.put("emailAddress", Types.VARCHAR);
		TABLE_COLUMNS_MAP.put("primaryLanguage", Types.VARCHAR);
		TABLE_COLUMNS_MAP.put("secondaryLanguage", Types.VARCHAR);
		TABLE_COLUMNS_MAP.put("address", Types.VARCHAR);
		TABLE_COLUMNS_MAP.put("city", Types.VARCHAR);
		TABLE_COLUMNS_MAP.put("zipcode", Types.VARCHAR);
		TABLE_COLUMNS_MAP.put("state_", Types.VARCHAR);
		TABLE_COLUMNS_MAP.put("pace", Types.VARCHAR);
		TABLE_COLUMNS_MAP.put("gpa", Types.FLOAT);
		TABLE_COLUMNS_MAP.put("resumeFileEntryId", Types.BIGINT);
		TABLE_COLUMNS_MAP.put("profession", Types.VARCHAR);
		TABLE_COLUMNS_MAP.put("practices", Types.VARCHAR);
		TABLE_COLUMNS_MAP.put("hired", Types.BOOLEAN);
		TABLE_COLUMNS_MAP.put("graduationDate", Types.TIMESTAMP);
		TABLE_COLUMNS_MAP.put("activelySeekingEmployment", Types.BOOLEAN);
		TABLE_COLUMNS_MAP.put("haveExternship", Types.BOOLEAN);
		TABLE_COLUMNS_MAP.put("createDate", Types.TIMESTAMP);
		TABLE_COLUMNS_MAP.put("createdBy", Types.BIGINT);
		TABLE_COLUMNS_MAP.put("modifiedDate", Types.TIMESTAMP);
		TABLE_COLUMNS_MAP.put("modifiedBy", Types.BIGINT);
	}

	public static final String TABLE_SQL_CREATE = "create table Medicus_Student (studentId LONG not null primary key,stundetCampusId VARCHAR(75) null,campusId LONG,schoolId LONG,firstName VARCHAR(20) null,middleName VARCHAR(20) null,lastName VARCHAR(20) null,profileImageId LONG,dateOfBirth DATE null,gender VARCHAR(10) null,contactNumber VARCHAR(15) null,homePhoneNumber VARCHAR(15) null,emailAddress VARCHAR(30) null,primaryLanguage VARCHAR(200) null,secondaryLanguage VARCHAR(200) null,address VARCHAR(100) null,city VARCHAR(15) null,zipcode VARCHAR(6) null,state_ VARCHAR(15) null,pace VARCHAR(15) null,gpa DOUBLE,resumeFileEntryId LONG,profession VARCHAR(30) null,practices VARCHAR(30) null,hired BOOLEAN,graduationDate DATE null,activelySeekingEmployment BOOLEAN,haveExternship BOOLEAN,createDate DATE null,createdBy LONG,modifiedDate DATE null,modifiedBy LONG)";
	public static final String TABLE_SQL_DROP = "drop table Medicus_Student";
	public static final String ORDER_BY_JPQL = " ORDER BY student.studentId ASC";
	public static final String ORDER_BY_SQL = " ORDER BY Medicus_Student.studentId ASC";
	public static final String DATA_SOURCE = "liferayDataSource";
	public static final String SESSION_FACTORY = "liferaySessionFactory";
	public static final String TX_MANAGER = "liferayTransactionManager";
	public static final boolean ENTITY_CACHE_ENABLED = GetterUtil.getBoolean(com.medicus.common.service.service.util.PropsUtil.get(
				"value.object.entity.cache.enabled.com.medicus.common.service.model.Student"),
			true);
	public static final boolean FINDER_CACHE_ENABLED = GetterUtil.getBoolean(com.medicus.common.service.service.util.PropsUtil.get(
				"value.object.finder.cache.enabled.com.medicus.common.service.model.Student"),
			true);
	public static final boolean COLUMN_BITMASK_ENABLED = GetterUtil.getBoolean(com.medicus.common.service.service.util.PropsUtil.get(
				"value.object.column.bitmask.enabled.com.medicus.common.service.model.Student"),
			true);
	public static final long STUNDETCAMPUSID_COLUMN_BITMASK = 1L;
	public static final long STUDENTID_COLUMN_BITMASK = 2L;
	public static final long LOCK_EXPIRATION_TIME = GetterUtil.getLong(com.medicus.common.service.service.util.PropsUtil.get(
				"lock.expiration.time.com.medicus.common.service.model.Student"));

	public StudentModelImpl() {
	}

	@Override
	public long getPrimaryKey() {
		return _studentId;
	}

	@Override
	public void setPrimaryKey(long primaryKey) {
		setStudentId(primaryKey);
	}

	@Override
	public Serializable getPrimaryKeyObj() {
		return _studentId;
	}

	@Override
	public void setPrimaryKeyObj(Serializable primaryKeyObj) {
		setPrimaryKey(((Long)primaryKeyObj).longValue());
	}

	@Override
	public Class<?> getModelClass() {
		return Student.class;
	}

	@Override
	public String getModelClassName() {
		return Student.class.getName();
	}

	@Override
	public Map<String, Object> getModelAttributes() {
		Map<String, Object> attributes = new HashMap<String, Object>();

		attributes.put("studentId", getStudentId());
		attributes.put("stundetCampusId", getStundetCampusId());
		attributes.put("campusId", getCampusId());
		attributes.put("schoolId", getSchoolId());
		attributes.put("firstName", getFirstName());
		attributes.put("middleName", getMiddleName());
		attributes.put("lastName", getLastName());
		attributes.put("profileImageId", getProfileImageId());
		attributes.put("dateOfBirth", getDateOfBirth());
		attributes.put("gender", getGender());
		attributes.put("contactNumber", getContactNumber());
		attributes.put("homePhoneNumber", getHomePhoneNumber());
		attributes.put("emailAddress", getEmailAddress());
		attributes.put("primaryLanguage", getPrimaryLanguage());
		attributes.put("secondaryLanguage", getSecondaryLanguage());
		attributes.put("address", getAddress());
		attributes.put("city", getCity());
		attributes.put("zipcode", getZipcode());
		attributes.put("state", getState());
		attributes.put("pace", getPace());
		attributes.put("gpa", getGpa());
		attributes.put("resumeFileEntryId", getResumeFileEntryId());
		attributes.put("profession", getProfession());
		attributes.put("practices", getPractices());
		attributes.put("hired", getHired());
		attributes.put("graduationDate", getGraduationDate());
		attributes.put("activelySeekingEmployment",
			getActivelySeekingEmployment());
		attributes.put("haveExternship", getHaveExternship());
		attributes.put("createDate", getCreateDate());
		attributes.put("createdBy", getCreatedBy());
		attributes.put("modifiedDate", getModifiedDate());
		attributes.put("modifiedBy", getModifiedBy());

		attributes.put("entityCacheEnabled", isEntityCacheEnabled());
		attributes.put("finderCacheEnabled", isFinderCacheEnabled());

		return attributes;
	}

	@Override
	public void setModelAttributes(Map<String, Object> attributes) {
		Long studentId = (Long)attributes.get("studentId");

		if (studentId != null) {
			setStudentId(studentId);
		}

		String stundetCampusId = (String)attributes.get("stundetCampusId");

		if (stundetCampusId != null) {
			setStundetCampusId(stundetCampusId);
		}

		Long campusId = (Long)attributes.get("campusId");

		if (campusId != null) {
			setCampusId(campusId);
		}

		Long schoolId = (Long)attributes.get("schoolId");

		if (schoolId != null) {
			setSchoolId(schoolId);
		}

		String firstName = (String)attributes.get("firstName");

		if (firstName != null) {
			setFirstName(firstName);
		}

		String middleName = (String)attributes.get("middleName");

		if (middleName != null) {
			setMiddleName(middleName);
		}

		String lastName = (String)attributes.get("lastName");

		if (lastName != null) {
			setLastName(lastName);
		}

		Long profileImageId = (Long)attributes.get("profileImageId");

		if (profileImageId != null) {
			setProfileImageId(profileImageId);
		}

		Date dateOfBirth = (Date)attributes.get("dateOfBirth");

		if (dateOfBirth != null) {
			setDateOfBirth(dateOfBirth);
		}

		String gender = (String)attributes.get("gender");

		if (gender != null) {
			setGender(gender);
		}

		String contactNumber = (String)attributes.get("contactNumber");

		if (contactNumber != null) {
			setContactNumber(contactNumber);
		}

		String homePhoneNumber = (String)attributes.get("homePhoneNumber");

		if (homePhoneNumber != null) {
			setHomePhoneNumber(homePhoneNumber);
		}

		String emailAddress = (String)attributes.get("emailAddress");

		if (emailAddress != null) {
			setEmailAddress(emailAddress);
		}

		String primaryLanguage = (String)attributes.get("primaryLanguage");

		if (primaryLanguage != null) {
			setPrimaryLanguage(primaryLanguage);
		}

		String secondaryLanguage = (String)attributes.get("secondaryLanguage");

		if (secondaryLanguage != null) {
			setSecondaryLanguage(secondaryLanguage);
		}

		String address = (String)attributes.get("address");

		if (address != null) {
			setAddress(address);
		}

		String city = (String)attributes.get("city");

		if (city != null) {
			setCity(city);
		}

		String zipcode = (String)attributes.get("zipcode");

		if (zipcode != null) {
			setZipcode(zipcode);
		}

		String state = (String)attributes.get("state");

		if (state != null) {
			setState(state);
		}

		String pace = (String)attributes.get("pace");

		if (pace != null) {
			setPace(pace);
		}

		Float gpa = (Float)attributes.get("gpa");

		if (gpa != null) {
			setGpa(gpa);
		}

		Long resumeFileEntryId = (Long)attributes.get("resumeFileEntryId");

		if (resumeFileEntryId != null) {
			setResumeFileEntryId(resumeFileEntryId);
		}

		String profession = (String)attributes.get("profession");

		if (profession != null) {
			setProfession(profession);
		}

		String practices = (String)attributes.get("practices");

		if (practices != null) {
			setPractices(practices);
		}

		Boolean hired = (Boolean)attributes.get("hired");

		if (hired != null) {
			setHired(hired);
		}

		Date graduationDate = (Date)attributes.get("graduationDate");

		if (graduationDate != null) {
			setGraduationDate(graduationDate);
		}

		Boolean activelySeekingEmployment = (Boolean)attributes.get(
				"activelySeekingEmployment");

		if (activelySeekingEmployment != null) {
			setActivelySeekingEmployment(activelySeekingEmployment);
		}

		Boolean haveExternship = (Boolean)attributes.get("haveExternship");

		if (haveExternship != null) {
			setHaveExternship(haveExternship);
		}

		Date createDate = (Date)attributes.get("createDate");

		if (createDate != null) {
			setCreateDate(createDate);
		}

		Long createdBy = (Long)attributes.get("createdBy");

		if (createdBy != null) {
			setCreatedBy(createdBy);
		}

		Date modifiedDate = (Date)attributes.get("modifiedDate");

		if (modifiedDate != null) {
			setModifiedDate(modifiedDate);
		}

		Long modifiedBy = (Long)attributes.get("modifiedBy");

		if (modifiedBy != null) {
			setModifiedBy(modifiedBy);
		}
	}

	@Override
	public long getStudentId() {
		return _studentId;
	}

	@Override
	public void setStudentId(long studentId) {
		_studentId = studentId;
	}

	@Override
	public String getStundetCampusId() {
		if (_stundetCampusId == null) {
			return StringPool.BLANK;
		}
		else {
			return _stundetCampusId;
		}
	}

	@Override
	public void setStundetCampusId(String stundetCampusId) {
		_columnBitmask |= STUNDETCAMPUSID_COLUMN_BITMASK;

		if (_originalStundetCampusId == null) {
			_originalStundetCampusId = _stundetCampusId;
		}

		_stundetCampusId = stundetCampusId;
	}

	public String getOriginalStundetCampusId() {
		return GetterUtil.getString(_originalStundetCampusId);
	}

	@Override
	public long getCampusId() {
		return _campusId;
	}

	@Override
	public void setCampusId(long campusId) {
		_campusId = campusId;
	}

	@Override
	public long getSchoolId() {
		return _schoolId;
	}

	@Override
	public void setSchoolId(long schoolId) {
		_schoolId = schoolId;
	}

	@Override
	public String getFirstName() {
		if (_firstName == null) {
			return StringPool.BLANK;
		}
		else {
			return _firstName;
		}
	}

	@Override
	public void setFirstName(String firstName) {
		_firstName = firstName;
	}

	@Override
	public String getMiddleName() {
		if (_middleName == null) {
			return StringPool.BLANK;
		}
		else {
			return _middleName;
		}
	}

	@Override
	public void setMiddleName(String middleName) {
		_middleName = middleName;
	}

	@Override
	public String getLastName() {
		if (_lastName == null) {
			return StringPool.BLANK;
		}
		else {
			return _lastName;
		}
	}

	@Override
	public void setLastName(String lastName) {
		_lastName = lastName;
	}

	@Override
	public long getProfileImageId() {
		return _profileImageId;
	}

	@Override
	public void setProfileImageId(long profileImageId) {
		_profileImageId = profileImageId;
	}

	@Override
	public Date getDateOfBirth() {
		return _dateOfBirth;
	}

	@Override
	public void setDateOfBirth(Date dateOfBirth) {
		_dateOfBirth = dateOfBirth;
	}

	@Override
	public String getGender() {
		if (_gender == null) {
			return StringPool.BLANK;
		}
		else {
			return _gender;
		}
	}

	@Override
	public void setGender(String gender) {
		_gender = gender;
	}

	@Override
	public String getContactNumber() {
		if (_contactNumber == null) {
			return StringPool.BLANK;
		}
		else {
			return _contactNumber;
		}
	}

	@Override
	public void setContactNumber(String contactNumber) {
		_contactNumber = contactNumber;
	}

	@Override
	public String getHomePhoneNumber() {
		if (_homePhoneNumber == null) {
			return StringPool.BLANK;
		}
		else {
			return _homePhoneNumber;
		}
	}

	@Override
	public void setHomePhoneNumber(String homePhoneNumber) {
		_homePhoneNumber = homePhoneNumber;
	}

	@Override
	public String getEmailAddress() {
		if (_emailAddress == null) {
			return StringPool.BLANK;
		}
		else {
			return _emailAddress;
		}
	}

	@Override
	public void setEmailAddress(String emailAddress) {
		_emailAddress = emailAddress;
	}

	@Override
	public String getPrimaryLanguage() {
		if (_primaryLanguage == null) {
			return StringPool.BLANK;
		}
		else {
			return _primaryLanguage;
		}
	}

	@Override
	public void setPrimaryLanguage(String primaryLanguage) {
		_primaryLanguage = primaryLanguage;
	}

	@Override
	public String getSecondaryLanguage() {
		if (_secondaryLanguage == null) {
			return StringPool.BLANK;
		}
		else {
			return _secondaryLanguage;
		}
	}

	@Override
	public void setSecondaryLanguage(String secondaryLanguage) {
		_secondaryLanguage = secondaryLanguage;
	}

	@Override
	public String getAddress() {
		if (_address == null) {
			return StringPool.BLANK;
		}
		else {
			return _address;
		}
	}

	@Override
	public void setAddress(String address) {
		_address = address;
	}

	@Override
	public String getCity() {
		if (_city == null) {
			return StringPool.BLANK;
		}
		else {
			return _city;
		}
	}

	@Override
	public void setCity(String city) {
		_city = city;
	}

	@Override
	public String getZipcode() {
		if (_zipcode == null) {
			return StringPool.BLANK;
		}
		else {
			return _zipcode;
		}
	}

	@Override
	public void setZipcode(String zipcode) {
		_zipcode = zipcode;
	}

	@Override
	public String getState() {
		if (_state == null) {
			return StringPool.BLANK;
		}
		else {
			return _state;
		}
	}

	@Override
	public void setState(String state) {
		_state = state;
	}

	@Override
	public String getPace() {
		if (_pace == null) {
			return StringPool.BLANK;
		}
		else {
			return _pace;
		}
	}

	@Override
	public void setPace(String pace) {
		_pace = pace;
	}

	@Override
	public float getGpa() {
		return _gpa;
	}

	@Override
	public void setGpa(float gpa) {
		_gpa = gpa;
	}

	@Override
	public long getResumeFileEntryId() {
		return _resumeFileEntryId;
	}

	@Override
	public void setResumeFileEntryId(long resumeFileEntryId) {
		_resumeFileEntryId = resumeFileEntryId;
	}

	@Override
	public String getProfession() {
		if (_profession == null) {
			return StringPool.BLANK;
		}
		else {
			return _profession;
		}
	}

	@Override
	public void setProfession(String profession) {
		_profession = profession;
	}

	@Override
	public String getPractices() {
		if (_practices == null) {
			return StringPool.BLANK;
		}
		else {
			return _practices;
		}
	}

	@Override
	public void setPractices(String practices) {
		_practices = practices;
	}

	@Override
	public boolean getHired() {
		return _hired;
	}

	@Override
	public boolean isHired() {
		return _hired;
	}

	@Override
	public void setHired(boolean hired) {
		_hired = hired;
	}

	@Override
	public Date getGraduationDate() {
		return _graduationDate;
	}

	@Override
	public void setGraduationDate(Date graduationDate) {
		_graduationDate = graduationDate;
	}

	@Override
	public boolean getActivelySeekingEmployment() {
		return _activelySeekingEmployment;
	}

	@Override
	public boolean isActivelySeekingEmployment() {
		return _activelySeekingEmployment;
	}

	@Override
	public void setActivelySeekingEmployment(boolean activelySeekingEmployment) {
		_activelySeekingEmployment = activelySeekingEmployment;
	}

	@Override
	public boolean getHaveExternship() {
		return _haveExternship;
	}

	@Override
	public boolean isHaveExternship() {
		return _haveExternship;
	}

	@Override
	public void setHaveExternship(boolean haveExternship) {
		_haveExternship = haveExternship;
	}

	@Override
	public Date getCreateDate() {
		return _createDate;
	}

	@Override
	public void setCreateDate(Date createDate) {
		_createDate = createDate;
	}

	@Override
	public long getCreatedBy() {
		return _createdBy;
	}

	@Override
	public void setCreatedBy(long createdBy) {
		_createdBy = createdBy;
	}

	@Override
	public Date getModifiedDate() {
		return _modifiedDate;
	}

	public boolean hasSetModifiedDate() {
		return _setModifiedDate;
	}

	@Override
	public void setModifiedDate(Date modifiedDate) {
		_setModifiedDate = true;

		_modifiedDate = modifiedDate;
	}

	@Override
	public long getModifiedBy() {
		return _modifiedBy;
	}

	@Override
	public void setModifiedBy(long modifiedBy) {
		_modifiedBy = modifiedBy;
	}

	public long getColumnBitmask() {
		return _columnBitmask;
	}

	@Override
	public ExpandoBridge getExpandoBridge() {
		return ExpandoBridgeFactoryUtil.getExpandoBridge(0,
			Student.class.getName(), getPrimaryKey());
	}

	@Override
	public void setExpandoBridgeAttributes(ServiceContext serviceContext) {
		ExpandoBridge expandoBridge = getExpandoBridge();

		expandoBridge.setAttributes(serviceContext);
	}

	@Override
	public Student toEscapedModel() {
		if (_escapedModel == null) {
			_escapedModel = (Student)ProxyUtil.newProxyInstance(_classLoader,
					_escapedModelInterfaces, new AutoEscapeBeanHandler(this));
		}

		return _escapedModel;
	}

	@Override
	public Object clone() {
		StudentImpl studentImpl = new StudentImpl();

		studentImpl.setStudentId(getStudentId());
		studentImpl.setStundetCampusId(getStundetCampusId());
		studentImpl.setCampusId(getCampusId());
		studentImpl.setSchoolId(getSchoolId());
		studentImpl.setFirstName(getFirstName());
		studentImpl.setMiddleName(getMiddleName());
		studentImpl.setLastName(getLastName());
		studentImpl.setProfileImageId(getProfileImageId());
		studentImpl.setDateOfBirth(getDateOfBirth());
		studentImpl.setGender(getGender());
		studentImpl.setContactNumber(getContactNumber());
		studentImpl.setHomePhoneNumber(getHomePhoneNumber());
		studentImpl.setEmailAddress(getEmailAddress());
		studentImpl.setPrimaryLanguage(getPrimaryLanguage());
		studentImpl.setSecondaryLanguage(getSecondaryLanguage());
		studentImpl.setAddress(getAddress());
		studentImpl.setCity(getCity());
		studentImpl.setZipcode(getZipcode());
		studentImpl.setState(getState());
		studentImpl.setPace(getPace());
		studentImpl.setGpa(getGpa());
		studentImpl.setResumeFileEntryId(getResumeFileEntryId());
		studentImpl.setProfession(getProfession());
		studentImpl.setPractices(getPractices());
		studentImpl.setHired(getHired());
		studentImpl.setGraduationDate(getGraduationDate());
		studentImpl.setActivelySeekingEmployment(getActivelySeekingEmployment());
		studentImpl.setHaveExternship(getHaveExternship());
		studentImpl.setCreateDate(getCreateDate());
		studentImpl.setCreatedBy(getCreatedBy());
		studentImpl.setModifiedDate(getModifiedDate());
		studentImpl.setModifiedBy(getModifiedBy());

		studentImpl.resetOriginalValues();

		return studentImpl;
	}

	@Override
	public int compareTo(Student student) {
		long primaryKey = student.getPrimaryKey();

		if (getPrimaryKey() < primaryKey) {
			return -1;
		}
		else if (getPrimaryKey() > primaryKey) {
			return 1;
		}
		else {
			return 0;
		}
	}

	@Override
	public boolean equals(Object obj) {
		if (this == obj) {
			return true;
		}

		if (!(obj instanceof Student)) {
			return false;
		}

		Student student = (Student)obj;

		long primaryKey = student.getPrimaryKey();

		if (getPrimaryKey() == primaryKey) {
			return true;
		}
		else {
			return false;
		}
	}

	@Override
	public int hashCode() {
		return (int)getPrimaryKey();
	}

	@Override
	public boolean isEntityCacheEnabled() {
		return ENTITY_CACHE_ENABLED;
	}

	@Override
	public boolean isFinderCacheEnabled() {
		return FINDER_CACHE_ENABLED;
	}

	@Override
	public void resetOriginalValues() {
		StudentModelImpl studentModelImpl = this;

		studentModelImpl._originalStundetCampusId = studentModelImpl._stundetCampusId;

		studentModelImpl._setModifiedDate = false;

		studentModelImpl._columnBitmask = 0;
	}

	@Override
	public CacheModel<Student> toCacheModel() {
		StudentCacheModel studentCacheModel = new StudentCacheModel();

		studentCacheModel.studentId = getStudentId();

		studentCacheModel.stundetCampusId = getStundetCampusId();

		String stundetCampusId = studentCacheModel.stundetCampusId;

		if ((stundetCampusId != null) && (stundetCampusId.length() == 0)) {
			studentCacheModel.stundetCampusId = null;
		}

		studentCacheModel.campusId = getCampusId();

		studentCacheModel.schoolId = getSchoolId();

		studentCacheModel.firstName = getFirstName();

		String firstName = studentCacheModel.firstName;

		if ((firstName != null) && (firstName.length() == 0)) {
			studentCacheModel.firstName = null;
		}

		studentCacheModel.middleName = getMiddleName();

		String middleName = studentCacheModel.middleName;

		if ((middleName != null) && (middleName.length() == 0)) {
			studentCacheModel.middleName = null;
		}

		studentCacheModel.lastName = getLastName();

		String lastName = studentCacheModel.lastName;

		if ((lastName != null) && (lastName.length() == 0)) {
			studentCacheModel.lastName = null;
		}

		studentCacheModel.profileImageId = getProfileImageId();

		Date dateOfBirth = getDateOfBirth();

		if (dateOfBirth != null) {
			studentCacheModel.dateOfBirth = dateOfBirth.getTime();
		}
		else {
			studentCacheModel.dateOfBirth = Long.MIN_VALUE;
		}

		studentCacheModel.gender = getGender();

		String gender = studentCacheModel.gender;

		if ((gender != null) && (gender.length() == 0)) {
			studentCacheModel.gender = null;
		}

		studentCacheModel.contactNumber = getContactNumber();

		String contactNumber = studentCacheModel.contactNumber;

		if ((contactNumber != null) && (contactNumber.length() == 0)) {
			studentCacheModel.contactNumber = null;
		}

		studentCacheModel.homePhoneNumber = getHomePhoneNumber();

		String homePhoneNumber = studentCacheModel.homePhoneNumber;

		if ((homePhoneNumber != null) && (homePhoneNumber.length() == 0)) {
			studentCacheModel.homePhoneNumber = null;
		}

		studentCacheModel.emailAddress = getEmailAddress();

		String emailAddress = studentCacheModel.emailAddress;

		if ((emailAddress != null) && (emailAddress.length() == 0)) {
			studentCacheModel.emailAddress = null;
		}

		studentCacheModel.primaryLanguage = getPrimaryLanguage();

		String primaryLanguage = studentCacheModel.primaryLanguage;

		if ((primaryLanguage != null) && (primaryLanguage.length() == 0)) {
			studentCacheModel.primaryLanguage = null;
		}

		studentCacheModel.secondaryLanguage = getSecondaryLanguage();

		String secondaryLanguage = studentCacheModel.secondaryLanguage;

		if ((secondaryLanguage != null) && (secondaryLanguage.length() == 0)) {
			studentCacheModel.secondaryLanguage = null;
		}

		studentCacheModel.address = getAddress();

		String address = studentCacheModel.address;

		if ((address != null) && (address.length() == 0)) {
			studentCacheModel.address = null;
		}

		studentCacheModel.city = getCity();

		String city = studentCacheModel.city;

		if ((city != null) && (city.length() == 0)) {
			studentCacheModel.city = null;
		}

		studentCacheModel.zipcode = getZipcode();

		String zipcode = studentCacheModel.zipcode;

		if ((zipcode != null) && (zipcode.length() == 0)) {
			studentCacheModel.zipcode = null;
		}

		studentCacheModel.state = getState();

		String state = studentCacheModel.state;

		if ((state != null) && (state.length() == 0)) {
			studentCacheModel.state = null;
		}

		studentCacheModel.pace = getPace();

		String pace = studentCacheModel.pace;

		if ((pace != null) && (pace.length() == 0)) {
			studentCacheModel.pace = null;
		}

		studentCacheModel.gpa = getGpa();

		studentCacheModel.resumeFileEntryId = getResumeFileEntryId();

		studentCacheModel.profession = getProfession();

		String profession = studentCacheModel.profession;

		if ((profession != null) && (profession.length() == 0)) {
			studentCacheModel.profession = null;
		}

		studentCacheModel.practices = getPractices();

		String practices = studentCacheModel.practices;

		if ((practices != null) && (practices.length() == 0)) {
			studentCacheModel.practices = null;
		}

		studentCacheModel.hired = getHired();

		Date graduationDate = getGraduationDate();

		if (graduationDate != null) {
			studentCacheModel.graduationDate = graduationDate.getTime();
		}
		else {
			studentCacheModel.graduationDate = Long.MIN_VALUE;
		}

		studentCacheModel.activelySeekingEmployment = getActivelySeekingEmployment();

		studentCacheModel.haveExternship = getHaveExternship();

		Date createDate = getCreateDate();

		if (createDate != null) {
			studentCacheModel.createDate = createDate.getTime();
		}
		else {
			studentCacheModel.createDate = Long.MIN_VALUE;
		}

		studentCacheModel.createdBy = getCreatedBy();

		Date modifiedDate = getModifiedDate();

		if (modifiedDate != null) {
			studentCacheModel.modifiedDate = modifiedDate.getTime();
		}
		else {
			studentCacheModel.modifiedDate = Long.MIN_VALUE;
		}

		studentCacheModel.modifiedBy = getModifiedBy();

		return studentCacheModel;
	}

	@Override
	public String toString() {
		StringBundler sb = new StringBundler(65);

		sb.append("{studentId=");
		sb.append(getStudentId());
		sb.append(", stundetCampusId=");
		sb.append(getStundetCampusId());
		sb.append(", campusId=");
		sb.append(getCampusId());
		sb.append(", schoolId=");
		sb.append(getSchoolId());
		sb.append(", firstName=");
		sb.append(getFirstName());
		sb.append(", middleName=");
		sb.append(getMiddleName());
		sb.append(", lastName=");
		sb.append(getLastName());
		sb.append(", profileImageId=");
		sb.append(getProfileImageId());
		sb.append(", dateOfBirth=");
		sb.append(getDateOfBirth());
		sb.append(", gender=");
		sb.append(getGender());
		sb.append(", contactNumber=");
		sb.append(getContactNumber());
		sb.append(", homePhoneNumber=");
		sb.append(getHomePhoneNumber());
		sb.append(", emailAddress=");
		sb.append(getEmailAddress());
		sb.append(", primaryLanguage=");
		sb.append(getPrimaryLanguage());
		sb.append(", secondaryLanguage=");
		sb.append(getSecondaryLanguage());
		sb.append(", address=");
		sb.append(getAddress());
		sb.append(", city=");
		sb.append(getCity());
		sb.append(", zipcode=");
		sb.append(getZipcode());
		sb.append(", state=");
		sb.append(getState());
		sb.append(", pace=");
		sb.append(getPace());
		sb.append(", gpa=");
		sb.append(getGpa());
		sb.append(", resumeFileEntryId=");
		sb.append(getResumeFileEntryId());
		sb.append(", profession=");
		sb.append(getProfession());
		sb.append(", practices=");
		sb.append(getPractices());
		sb.append(", hired=");
		sb.append(getHired());
		sb.append(", graduationDate=");
		sb.append(getGraduationDate());
		sb.append(", activelySeekingEmployment=");
		sb.append(getActivelySeekingEmployment());
		sb.append(", haveExternship=");
		sb.append(getHaveExternship());
		sb.append(", createDate=");
		sb.append(getCreateDate());
		sb.append(", createdBy=");
		sb.append(getCreatedBy());
		sb.append(", modifiedDate=");
		sb.append(getModifiedDate());
		sb.append(", modifiedBy=");
		sb.append(getModifiedBy());
		sb.append("}");

		return sb.toString();
	}

	@Override
	public String toXmlString() {
		StringBundler sb = new StringBundler(100);

		sb.append("<model><model-name>");
		sb.append("com.medicus.common.service.model.Student");
		sb.append("</model-name>");

		sb.append(
			"<column><column-name>studentId</column-name><column-value><![CDATA[");
		sb.append(getStudentId());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>stundetCampusId</column-name><column-value><![CDATA[");
		sb.append(getStundetCampusId());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>campusId</column-name><column-value><![CDATA[");
		sb.append(getCampusId());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>schoolId</column-name><column-value><![CDATA[");
		sb.append(getSchoolId());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>firstName</column-name><column-value><![CDATA[");
		sb.append(getFirstName());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>middleName</column-name><column-value><![CDATA[");
		sb.append(getMiddleName());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>lastName</column-name><column-value><![CDATA[");
		sb.append(getLastName());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>profileImageId</column-name><column-value><![CDATA[");
		sb.append(getProfileImageId());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>dateOfBirth</column-name><column-value><![CDATA[");
		sb.append(getDateOfBirth());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>gender</column-name><column-value><![CDATA[");
		sb.append(getGender());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>contactNumber</column-name><column-value><![CDATA[");
		sb.append(getContactNumber());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>homePhoneNumber</column-name><column-value><![CDATA[");
		sb.append(getHomePhoneNumber());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>emailAddress</column-name><column-value><![CDATA[");
		sb.append(getEmailAddress());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>primaryLanguage</column-name><column-value><![CDATA[");
		sb.append(getPrimaryLanguage());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>secondaryLanguage</column-name><column-value><![CDATA[");
		sb.append(getSecondaryLanguage());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>address</column-name><column-value><![CDATA[");
		sb.append(getAddress());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>city</column-name><column-value><![CDATA[");
		sb.append(getCity());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>zipcode</column-name><column-value><![CDATA[");
		sb.append(getZipcode());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>state</column-name><column-value><![CDATA[");
		sb.append(getState());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>pace</column-name><column-value><![CDATA[");
		sb.append(getPace());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>gpa</column-name><column-value><![CDATA[");
		sb.append(getGpa());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>resumeFileEntryId</column-name><column-value><![CDATA[");
		sb.append(getResumeFileEntryId());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>profession</column-name><column-value><![CDATA[");
		sb.append(getProfession());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>practices</column-name><column-value><![CDATA[");
		sb.append(getPractices());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>hired</column-name><column-value><![CDATA[");
		sb.append(getHired());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>graduationDate</column-name><column-value><![CDATA[");
		sb.append(getGraduationDate());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>activelySeekingEmployment</column-name><column-value><![CDATA[");
		sb.append(getActivelySeekingEmployment());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>haveExternship</column-name><column-value><![CDATA[");
		sb.append(getHaveExternship());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>createDate</column-name><column-value><![CDATA[");
		sb.append(getCreateDate());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>createdBy</column-name><column-value><![CDATA[");
		sb.append(getCreatedBy());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>modifiedDate</column-name><column-value><![CDATA[");
		sb.append(getModifiedDate());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>modifiedBy</column-name><column-value><![CDATA[");
		sb.append(getModifiedBy());
		sb.append("]]></column-value></column>");

		sb.append("</model>");

		return sb.toString();
	}

	private static final ClassLoader _classLoader = Student.class.getClassLoader();
	private static final Class<?>[] _escapedModelInterfaces = new Class[] {
			Student.class
		};
	private long _studentId;
	private String _stundetCampusId;
	private String _originalStundetCampusId;
	private long _campusId;
	private long _schoolId;
	private String _firstName;
	private String _middleName;
	private String _lastName;
	private long _profileImageId;
	private Date _dateOfBirth;
	private String _gender;
	private String _contactNumber;
	private String _homePhoneNumber;
	private String _emailAddress;
	private String _primaryLanguage;
	private String _secondaryLanguage;
	private String _address;
	private String _city;
	private String _zipcode;
	private String _state;
	private String _pace;
	private float _gpa;
	private long _resumeFileEntryId;
	private String _profession;
	private String _practices;
	private boolean _hired;
	private Date _graduationDate;
	private boolean _activelySeekingEmployment;
	private boolean _haveExternship;
	private Date _createDate;
	private long _createdBy;
	private Date _modifiedDate;
	private boolean _setModifiedDate;
	private long _modifiedBy;
	private long _columnBitmask;
	private Student _escapedModel;
}